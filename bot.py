import telebot
from telebot import types
from tariffs import tariffs
from keyboards import get_result_keyboard, get_bank_link_keyboard
import os

bot = telebot.TeleBot(os.getenv("TELEGRAM_BOT_TOKEN"))
user_data = {}

@bot.message_handler(commands=['start', 'help'])
def start(message):
    user_data[message.chat.id] = {}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*tariffs.keys())
    bot.send_message(message.chat.id, "üëã –í—ã–±–µ—Ä–∏ –±–∞–Ω–∫:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in tariffs)
def choose_bank(message):
    user_data[message.chat.id] = {"bank": message.text}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*[str(k) for k in tariffs[message.text].keys()])
    bot.send_message(message.chat.id, "üìÖ –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text.isdigit())
def handle_numbers(message):
    chat_id = message.chat.id
    user = user_data.get(chat_id, {})
    if "bank" in user and "months" not in user:
        months = int(message.text)
        if months not in tariffs[user["bank"]]:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ä–æ–∫.")
            return
        user_data[chat_id]["months"] = months
        bot.send_message(chat_id, "üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:", reply_markup=types.ReplyKeyboardRemove())
    elif "months" in user:
        try:
            amount = float(message.text)
        except ValueError:
            bot.send_message(chat_id, "‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
            return

        bank = user["bank"]
        months = user["months"]
        base_rate = tariffs[bank][months]
        extra_rate = 0.013 if bank == "–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫" else 0.0
        total_rate = base_rate + extra_rate

        total = amount / (1 - total_rate)
        monthly = total / (months + 1)
        overpay = total - amount

        user_data[chat_id]["amount"] = amount

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—Ç–∞–≤–∫–æ–π
        if extra_rate > 0:
            rate_str = f"{base_rate * 100:.1f}% + {extra_rate * 100:.1f}% (—ç–∫–≤–∞–π—Ä–∏–Ω–≥) = {total_rate * 100:.1f}%"
        else:
            rate_str = f"{total_rate * 100:.1f}%"

        # –¢–∞–±–ª–∏—Ü–∞ —Ç–∞—Ä–∏—Ñ–æ–≤
        if extra_rate > 0:
            rate_table = "\n".join([
                f"<b>{m} –º–µ—Å.</b>: {int(r * 1000)/10:.1f}% + {int(extra_rate * 1000)/10:.1f}% = {int((r + extra_rate) * 1000)/10:.1f}%"
                for m, r in sorted(tariffs[bank].items())
            ])
        else:
            rate_table = "\n".join([
                f"<b>{m} –º–µ—Å.</b>: {int(r * 1000)/10:.1f}%"
                for m, r in sorted(tariffs[bank].items())
            ])

        text = (
            f"üìä <b>–†–∞—Å—á—ë—Ç –ø–æ {bank}</b>\n\n"
            f"<b>–°—Ä–æ–∫:</b> {months} –º–µ—Å. ({months + 1} –ø–ª–∞—Ç–µ–∂–µ–π)\n"
            f"<b>–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:</b> {amount:.2f} –≥—Ä–Ω\n"
            f"<b>–°—Ç–∞–≤–∫–∞:</b> {rate_str}\n"
            f"<b>–ö–ª–∏–µ–Ω—Ç –∑–∞–ø–ª–∞—Ç–∏—Ç:</b> {total:.2f} –≥—Ä–Ω\n"
            f"<b>–ï–∂–µ–º–µ—Å—è—á–Ω–æ:</b> {monthly:.2f} –≥—Ä–Ω\n"
            f"<b>–ü–µ—Ä–µ–ø–ª–∞—Ç–∞:</b> {overpay:.2f} –≥—Ä–Ω\n\n"
            f"üìà <b>–¢–∞—Ä–∏—Ñ—ã {bank}:</b>\n{rate_table}"
        )

        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=get_result_keyboard())

        link_kb = get_bank_link_keyboard(bank)
        if link_kb:
            bot.send_message(chat_id, "‚¨áÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è:", reply_markup=link_kb)

@bot.message_handler(func=lambda msg: msg.text in ["üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫", "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫", "üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", "üÜï –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞"])
def handle_change(message):
    chat_id = message.chat.id
    action = message.text
    if action == "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫" or action == "üÜï –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞":
        user_data[chat_id] = {}
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(*tariffs.keys())
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –±–∞–Ω–∫:", reply_markup=markup)
    elif action == "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫":
        bank = user_data[chat_id].get("bank")
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(*[str(k) for k in tariffs[bank].keys()])
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤:", reply_markup=markup)
    elif action == "üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É":
        user_data[chat_id].pop("amount", None)
        bot.send_message(chat_id, "–í–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:", reply_markup=types.ReplyKeyboardRemove())

import threading
import time
import flask

# –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –ø–æ—Ç–æ–∫–µ
def run_bot():
    bot.polling(none_stop=True)

threading.Thread(target=run_bot).start()

# –§–µ–π–∫–æ–≤—ã–π web-—Å–µ—Ä–≤–µ—Ä
app = flask.Flask(__name__)

@app.route('/')
def index():
    return "Bot is running"

# Render —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å —Å–ª—É—à–∞–ª –ø–æ—Ä—Ç
if __name__ == '__main__':
    port = int(os.environ.get("PORT", 5000))
    app.run(host='0.0.0.0', port=port)
bot.polling()
