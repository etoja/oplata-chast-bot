import telebot
from flask import Flask, request
import os

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –¢–∞—Ä–∏—Ñ—ã –±–∞–Ω–∫–æ–≤
bank_rates = {
    "mono": {
        2: 1.9,
        3: 2.9,
        4: 3.9,
        5: 4.9,
        6: 5.9,
    },
    "pumb": {
        2: 2.5,
        3: 3.7,
        4: 4.9,
        5: 6.1,
        6: 7.3,
    },
    "privat": {
        2: 1.7,
        3: 2.8,
        4: 4.5,
        5: 5.7,
        6: 6.9,
        7: 8.0,
    }
}

bank_names = {
    "mono": "–ú–æ–Ω–æ–ë–∞–Ω–∫",
    "pumb": "–ü–£–ú–ë",
    "privat": "–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫"
}

# –í–µ–±—Ö—É–∫
@app.route('/', methods=['POST'])
def webhook():
    if request.headers.get('content-type') == 'application/json':
        json_string = request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        return 'Invalid request', 403

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.send_message(message.chat.id,
                     "üëã –ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<–±–∞–Ω–∫> <—Å—Ä–æ–∫ –≤ –º–µ—Å—è—Ü–∞—Ö> <—Å—É–º–º–∞>\n\n"
                     "–ù–∞–ø—Ä–∏–º–µ—Ä:\nmono 3 1000\n\n"
                     "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–Ω–∫–∏: mono, pumb, privat")

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    try:
        parts = message.text.lower().split()
        if len(parts) != 3:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: <–±–∞–Ω–∫> <—Å—Ä–æ–∫> <—Å—É–º–º–∞>")
            return

        bank_key, months_str, amount_str = parts
        months = int(months_str)
        desired_amount = float(amount_str)

        if bank_key not in bank_rates:
            bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–∞–Ω–∫. –ò—Å–ø–æ–ª—å–∑—É–π: mono, pumb, privat")
            return

        rates = bank_rates[bank_key]
        if months not in rates:
            bot.reply_to(message, f"‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—Ä–æ–∫ –¥–ª—è {bank_names[bank_key]}")
            return

        base_rate = rates[months]

        # –î–æ–±–∞–≤–ª—è–µ–º 1.3% –¥–ª—è –ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫–∞ (—ç–∫–≤–∞–π—Ä–∏–Ω–≥)
        if bank_key == "privat":
            acquiring_fee = 1.3
            total_rate = base_rate + acquiring_fee
            breakdown = f"{base_rate:.1f}% + {acquiring_fee:.1f}% (—ç–∫–≤–∞–π—Ä–∏–Ω–≥) = {total_rate:.1f}%"
        else:
            total_rate = base_rate
            breakdown = f"{total_rate:.1f}%"

        # –†–∞—Å—á—ë—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ —Ä—É–∫–∏ desired_amount
        client_pays = desired_amount / (1 - total_rate / 100)
        monthly = client_pays / (months + 1)
        overpay = client_pays - desired_amount

        result = (
            f"üìä –†–∞—Å—á—ë—Ç –ø–æ {bank_names[bank_key]}\n\n"
            f"–°—Ä–æ–∫: {months} –º–µ—Å. ({months + 1} –ø–ª–∞—Ç–µ–∂–µ–π)\n"
            f"–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {desired_amount:.2f} –≥—Ä–Ω\n"
            f"–°—Ç–∞–≤–∫–∞: {breakdown}\n"
            f"–ö–ª–∏–µ–Ω—Ç –∑–∞–ø–ª–∞—Ç–∏—Ç: {client_pays:.2f} –≥—Ä–Ω\n"
            f"–ï–∂–µ–º–µ—Å—è—á–Ω–æ: {monthly:.2f} –≥—Ä–Ω\n"
            f"–ü–µ—Ä–µ–ø–ª–∞—Ç–∞: {overpay:.2f} –≥—Ä–Ω\n\n"
            f"üìà –¢–∞—Ä–∏—Ñ—ã {bank_names[bank_key]}:\n" +
            "\n".join([f"{m} –º–µ—Å.: {round(r + (1.3 if bank_key == 'privat' else 0), 1)}%" for m, r in rates.items()])
        )

        bot.send_message(message.chat.id, result)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –£–±–µ–¥–∏—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö.")

# –£—Å—Ç–∞–Ω–æ–≤–∏ webhook –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª
# bot.set_webhook(url='https://oplata-chast-bot.onrender.com')

# –ó–∞–ø—É—Å–∫–∞–π —á–µ—Ä–µ–∑ Flask
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=10000)
