import telebot
from telebot import types
from tariffs import tariffs
import os

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
user_data = {}

@bot.message_handler(commands=['start', 'help'])
def start(message):
    user_data[message.chat.id] = {}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(*tariffs.keys())
    bot.send_message(message.chat.id, (
        "üëã <b>–Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–µ—Ä–µ–ø–ª–∞—Ç—ã –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ —á–∞—Å—Ç—è–º–∏.</b>\n\n"
        "üßæ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        "1Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –±–∞–Ω–∫\n"
        "2Ô∏è‚É£ –£–∫–∞–∂–∏ —Å—Ä–æ–∫ (–≤ –º–µ—Å—è—Ü–∞—Ö)\n"
        "3Ô∏è‚É£ –í–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å\n"
        "‚Äî –Ø –ø–æ—Å—á–∏—Ç–∞—é —Å—É–º–º—É –ø–µ—Ä–µ–ø–ª–∞—Ç—ã, –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –∏ –¥–∞–º —Ç–∞—Ä–∏—Ñ–Ω—É—é —Ç–∞–±–ª–∏—Ü—É.\n\n"
        "üì≤ –ü–æ—Å–ª–µ —Ä–∞—Å—á—ë—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.",
    ), parse_mode="HTML", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in tariffs)
def choose_bank(message):
    user_data[message.chat.id] = {"bank": message.text}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    options = [str(k) for k in tariffs[message.text].keys()]
    markup.add(*options)
    bot.send_message(message.chat.id, "üìÖ –í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ (–Ω–µ –ø–ª–∞—Ç–µ–∂–µ–π!):", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text.isdigit())
def choose_month_or_amount(message):
    chat_id = message.chat.id
    text = message.text
    data = user_data.get(chat_id, {})

    if "bank" in data and "months" not in data:
        months = int(text)
        if months in tariffs[data["bank"]]:
            user_data[chat_id]["months"] = months
            bot.send_message(chat_id, "üíµ –í–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å:")
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
    elif "months" in data:
        amount = float(text)
        bank = data["bank"]
        months = data["months"]
        rate = tariffs[bank][months]

        total = amount * (1 + rate)
        monthly = total / (months + 1)
        overpay = total - amount

        rate_table = "\n".join([f"{m} –º–µ—Å. ‚Äî {int(r * 1000) / 10:.1f}%" for m, r in sorted(tariffs[bank].items())])

        text = (
            f"üìä <b>–†–∞—Å—á—ë—Ç –ø–æ {bank}</b>\n"
            f"‚Äî <b>–°—Ä–æ–∫:</b> {months} –º–µ—Å. ({months + 1} –ø–ª–∞—Ç–µ–∂–µ–π)\n"
            f"‚Äî <b>–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:</b> {amount:.2f} –≥—Ä–Ω\n"
            f"‚Äî <b>–°—Ç–∞–≤–∫–∞:</b> {rate * 100:.1f}%\n"
            f"‚Äî <b>–ö–ª–∏–µ–Ω—Ç –∑–∞–ø–ª–∞—Ç–∏—Ç:</b> {total:.2f} –≥—Ä–Ω\n"
            f"‚Äî <b>–ï–∂–µ–º–µ—Å—è—á–Ω–æ:</b> {monthly:.2f} –≥—Ä–Ω\n"
            f"‚Äî <b>–ü–µ—Ä–µ–ø–ª–∞—Ç–∞:</b> {overpay:.2f} –≥—Ä–Ω\n\n"
            f"üìà <b>–¢–∞—Ä–∏—Ñ—ã {bank}:</b>\n{rate_table}"
        )

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫", "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫")
        markup.add("üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", "üÜï –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞")
        markup.add("ü§ù –ü–µ—Ä–µ–π—Ç–∏ –∫ @chast_monobankbot", "üîô –ù–∞–∑–∞–¥")

        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=markup)

        # –ê–≤—Ç–æ—Å–±—Ä–æ—Å –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
        user_data[chat_id] = {"bank": bank, "months": months, "amount": amount}

@bot.message_handler(func=lambda msg: msg.text in [
    "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫", "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫", "üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", "üÜï –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞",
    "ü§ù –ü–µ—Ä–µ–π—Ç–∏ –∫ @chast_monobankbot", "üîô –ù–∞–∑–∞–¥"
])
def handle_actions(message):
    chat_id = message.chat.id
    action = message.text

    if action == "üîÅ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–Ω–∫" or action == "üÜï –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞":
        user_data[chat_id] = {}
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(*tariffs.keys())
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –±–∞–Ω–∫:", reply_markup=markup)

    elif action == "üìÖ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫":
        bank = user_data[chat_id].get("bank")
        if not bank:
            bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –±–∞–Ω–∫.")
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        options = [str(k) for k in tariffs[bank].keys()]
        markup.add(*options)
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤:", reply_markup=markup)

    elif action == "üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É":
        bot.send_message(chat_id, "–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—É–º–º—É:")

    elif action == "ü§ù –ü–µ—Ä–µ–π—Ç–∏ –∫ @chast_monobankbot":
        summary = user_data.get(chat_id, {})
        msg = f"–•–æ—á—É –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞—Å—Å—Ä–æ—á–∫—É –≤ Monobank. –°—É–º–º–∞: {summary.get('amount', '‚Äî')} –≥—Ä–Ω. –°—Ä–æ–∫: {summary.get('months', '‚Äî')} –º–µ—Å."
        bot.send_message(chat_id, f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ üëâ <b>https://t.me/chast_monobankbot</b>\n\n–°–∫–æ–ø–∏—Ä—É–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n<code>{msg}</code>", parse_mode="HTML")

    elif action == "üîô –ù–∞–∑–∞–¥":
        bot.send_message(chat_id, "–ß—Ç–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=types.ReplyKeyboardRemove())
        start(message)

bot.polling()